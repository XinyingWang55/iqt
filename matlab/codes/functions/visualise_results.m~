function visualise_results(data_folders, settings)

%% Configurations:
% Paths:
input_dir = settings.input_dir;
output_dir = settings.output_dir;
trees_dir = settings.trees_dir;
trees_list = settings.trees_list;
patchlibs_dir = settings.patchlibs_dir;
dt_name = settings.dt_name;
rescale_factor = 1.0;
scale_const = 1E-3;

% Data:
subsample_rate=settings.subsample_rate;
fv=settings.feature_version;

% Problem:
ds=settings.upsample_rate;
n=settings.input_radius;
m=ds;
edge_recon = settings.edge; % true if you want to reconstruct on the edge
tail_name = sprintf('DS%02i_%ix%ix%i_%ix%ix%i_Sub%03i', ds, 2*n+1,2*n+1,2*n+1, m, m, m, subsample_rate)
tree_name = ['RegTreeValV' int2str(fv) '_' tail_name '_'];

trees={}; 
for k= 1:length(trees_list)
    tmp=load(sprintf([trees_dir '/' tree_name '%04i.mat'], trees_list(k)));
    trees{k} = tmp.tree;
end

if edge_recon % Reconstruct on the boundary.
   % reconstruct and save the estimated DTI and precision map:
   output_subdir  = sprintf(['RF_Edge_V' int2str(fv) '_NoTree%02i_' tail_name], length(trees_list));
else
   % reconstruct and save the estimated DTI and precision map:
   output_subdir  = sprintf(['RF_V' int2str(fv) '_NoTree%02i_' tail_name], length(trees_list));
end



%% Load low-res, high-res, estimate
for dataid = 1:length(data_folders)
    display(sprintf(['\nReconstructing: ' data_folders{dataid} '\n']))
    output_folder = [output_dir '/' data_folders{dataid}];
    if(~exist(output_folder))
        mkdir(output_folder);
    end
    
    % Load the data:
    file_orig = [input_dir '/' data_folders{dataid} '/' dt_name];
    dt_hr = ReadDT_Volume(file_orig);
    
    file_est = [output_folder '/' output_subdir '/dt_recon_']
    dt_est = ReadDT_Volume(file_est);
    
    file_low = [ input_dir '/' data_folders{dataid} '/' dt_name sprintf('lowres_%i_', ds)];
    dt_lr = BigbassReadDT_Volume(file_low);
    dt_lr = dt_lr(1:ds:end,1:ds:end,1:ds:end,:);
    
    % Take a slice, and compute MD, FA, CFA.
    slice_region = '(:,:,70,:)';
    slice_region_lr = '(:,:,35,:)';
    
    slice_lr=eval(['dt_lr' slice_region_lr]); dt_lr=[];
    slice_est=eval(['dt_est' slice_region]); dt_est=[]; 
    slice_hr=eval(['dt_hr' slice_region]); dt_hr=[];
    
    [md_lr, fa_lr, cfa_lr] = compute_MD_FA_CFA(slice_lr);
    [md_est, fa_est, cfa_est] = compute_MD_FA_CFA(slice_est);
    [md_hr, fa_hr, cfa_hr] = compute_MD_FA_CFA(slice_est);
    
    % Flip:
    md_lr = flipud(md_lr');
    md_est = flipud(md_est');
    md_hr = flipud(md_hr');
    
    fa_lr = flipud(fa_lr');
    fa_est = flipud(fa_est');
    fa_hr = flipud(fa_hr');
    
    cfa_lr2(:,:,1) = flipud(cfa_lr(:,:,1)');
    cfa_lr2(:,:,2) = flipud(cfa_lr(:,:,2)');
    cfa_lr2(:,:,3) = flipud(cfa_lr(:,:,3)');
    cfa_est2(:,:,1) = flipud(cfa_est(:,:,1)');
    cfa_est2(:,:,2) = flipud(cfa_est(:,:,2)');
    cfa_est2(:,:,3) = flipud(cfa_est(:,:,3)');
    cfa_hr2(:,:,1) = flipud(cfa_hr(:,:,1)');
    cfa_hr2(:,:,2) = flipud(cfa_hr(:,:,2)');
    cfa_hr2(:,:,3) = flipud(cfa_hr(:,:,3)');
    
    % Plot:
    figure; 
    subplot_tight(3,3,1,[0.03,0.01])
    imshow(md_lr,[]);
    title('Input')
    ylabel('MD')
    subplot(3,3,2)
    imshow(md_est,[]);
    title('IQT-RF')
    subplot(3,3,3)
    imshow(md_hr,[]);
    title('Output')
    
    subplot(3,3,4)
    imshow(cfa_lr2,[]);
    ylabel('CFA')
    subplot(3,3,5)
    imshow(cfa_est2,[]);
    subplot(3,3,6)
    imshow(cfa_hr2,[]);
    
    subplot(3,3,7)
    imshow(fa_lr,[]);
    ylabel('FA')
    subplot(3,3,8)
    imshow(fa_est,[]);
    subplot(3,3,9)
    imshow(fa_hr,[]);
    
    
end